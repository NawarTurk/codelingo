[
  {
    "id": 1,
    "title": "Destructuring Assignment",
    "description": "Destructuring assignment is a syntax in JavaScript that allows you to unpack values from arrays or properties from objects into distinct variables. It makes the code more concise and readable by allowing the extraction of multiple properties in one statement.",
    "example": "<pre><code>// Destructuring arrays\nconst [a, b] = [1, 2];\nconsole.log(a); // Outputs: 1\nconsole.log(b); // Outputs: 2\n\n// Destructuring objects\nconst user = { name: 'Alice', age: 25 };\nconst { name, age } = user;\nconsole.log(name); // Outputs: Alice\nconsole.log(age); // Outputs: 25\n\n// This allows for concise and readable code by extracting multiple properties in one statement.</code></pre>",
    "difficulty": "easy",
    "quiz": "What is destructuring assignment in JavaScript?"
  },
  {
    "id": 2,
    "title": "Array.filter",
    "description": "The `.filter` method creates a new array containing only the elements that pass a specified test implemented by a provided function. It iterates through each element in the array and includes it in the new array only if the function returns `true` for that element.",
    "example": "<pre><code>const numbers = [1, 2, 3, 4];\nconst evenNumbers = numbers.filter(n => n % 2 === 0);\nconsole.log(evenNumbers); // Outputs: [2, 4]\n// The .filter method applies the provided function to each element of the array and returns a new array with elements that pass the test.</code></pre>",
    "difficulty": "easy",
    "quiz": "What does the .filter method do in JavaScript, and provide an example?"
  },
  {
    "id": 3,
    "title": "Array.map",
    "description": "The `.map` method creates a new array populated with the results of calling a provided function on every element in the calling array. It applies the function to each element and returns a new array containing the transformed elements.",
    "example": "<pre><code>const numbers = [1, 2, 3, 4];\nconst doubled = numbers.map(n => n * 2);\nconsole.log(doubled); // Outputs: [2, 4, 6, 8]\n// The .map method applies the provided function to each element of the array and returns a new array.</code></pre>",
    "difficulty": "easy",
    "quiz": "What does the .map method do in JavaScript, and provide an example?"
  },
  {
    "id": 4,
    "title": "Nested Destructuring",
    "description": "Nested destructuring allows you to extract values from nested objects and arrays. This means you can unpack properties from objects within objects, or elements from arrays within arrays, making it easier to work with complex data structures.",
    "example": "<pre><code>const handleCheckboxChange = ({ target: { value, checked } }) => {\n  // This is an example of Nested destructuring\n  // Destructuring the event object to get the target element\n  // Then destructuring the target element to get the 'value' and 'checked' properties\n  // This is equivalent to:\n  // const value = event.target.value;\n  // const checked = event.target.checked;\n};</code></pre>",
    "difficulty": "easy",
    "quiz": "What is nested destructuring in JavaScript, and provide an example?"
  },
  {
    "id": 5,
    "title": "Conditional Rendering with Ternary Operator",
    "description": "The ternary operator in JavaScript is a concise way to perform conditional rendering. It evaluates a condition and returns one value if the condition is true and another value if it is false.",
    "example": "<pre><code>&lt;div className={isExpanded ? 'content-visible' : 'content-hidden'}&gt;&lt;/div&gt;\n// This renders the div with 'content-visible' class if isExpanded is true,\n// otherwise it renders with 'content-hidden' class.</code></pre>",
    "difficulty": "intermediate",
    "quiz": "How do you use the ternary operator for conditional rendering in React?"
  },
  {
    "id": 6,
    "title": "Using the Previous State in React",
    "description": "In React, when updating state based on the previous state, it is common to use the functional form of the state setter function. This form provides the previous state as an argument, ensuring that the state updates correctly, even if there are multiple state updates in a short period of time.",
    "example": "<pre><code>setDifficulties((prev) =>\n  checked\n    ? [...prev, value.toLowerCase()]\n    : prev.filter((difficulty) => difficulty !== value.toLowerCase())\n);\n// This uses the previous state 'prev' to add or remove difficulties based on the checkbox state.</code></pre>",
    "difficulty": "advanced",
    "quiz": "Why is it important to use the previous state when updating state in React?"
  },
  {
    "id": 7,
    "title": "Using the Spread Operator",
    "description": "The spread operator (`...`) in JavaScript makes it easy to work with arrays. It can combine multiple arrays into one or create a copy of an array.",
    "example": "<pre><code>// Example of using the spread operator with arrays:\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\nconsole.log(combined); // Output: [1, 2, 3, 4, 5, 6]\n\n// Example of using the spread operator to copy an array:\nconst original = ['a', 'b', 'c'];\nconst copy = [...original];\nconsole.log(copy); // Output: ['a', 'b', 'c']</code></pre>",
    "difficulty": "beginner",
    "quiz": "How do you use the spread operator to combine two arrays?"
  },
  {
    "id": 8,
    "title": "Using the Spread Operator in State Updates",
    "description": "The spread operator (`...`) in JavaScript allows you to create a new array that includes elements from an existing array, as well as any additional elements you specify. This is useful in React when you want to update state by adding new values to the previous state.",
    "example": "<pre><code>setDifficulties((prev) =>\n  checked\n    ? [...prev, value.toLowerCase()]\n    : prev.filter((difficulty) => difficulty !== value.toLowerCase())\n);\n// The spread operator is used to add the new difficulty to the previous state.</code></pre>",
    "difficulty": "intermediate",
    "quiz": "How do you use the spread operator to update state in React?"
  }
]
