[
  {
    "id": 1,
    "title": "Destructuring Assignment",
    "description": "Destructuring assignment is a syntax in JavaScript that allows you to unpack values from arrays or properties from objects into distinct variables. It makes the code more concise and readable by allowing the extraction of multiple properties in one statement.",
    "example": "<pre><code>// Destructuring arrays\nconst [a, b] = [1, 2];\nconsole.log(a); // Outputs: 1\nconsole.log(b); // Outputs: 2\n\n// Destructuring objects\nconst user = { name: 'Alice', age: 25 };\nconst { name, age } = user;\nconsole.log(name); // Outputs: Alice\nconsole.log(age); // Outputs: 25\n\n// This allows for concise and readable code by extracting multiple properties in one statement.</code></pre>",
    "difficulty": "easy",
    "quiz": "What is destructuring assignment in JavaScript?"
  },
  {
    "id": 2,
    "title": "Array.filter",
    "description": "The `.filter` method creates a new array containing only the elements that pass a specified test implemented by a provided function. It iterates through each element in the array and includes it in the new array only if the function returns `true` for that element.",
    "example": "<pre><code>const numbers = [1, 2, 3, 4];\nconst evenNumbers = numbers.filter(n => n % 2 === 0);\nconsole.log(evenNumbers); // Outputs: [2, 4]\n// The .filter method applies the provided function to each element of the array and returns a new array with elements that pass the test.</code></pre>",
    "difficulty": "easy",
    "quiz": "What does the .filter method do in JavaScript, and provide an example?"
  },
  {
    "id": 3,
    "title": "Array.map",
    "description": "The `.map` method creates a new array populated with the results of calling a provided function on every element in the calling array. It applies the function to each element and returns a new array containing the transformed elements.",
    "example": "<pre><code>const numbers = [1, 2, 3, 4];\nconst doubled = numbers.map(n => n * 2);\nconsole.log(doubled); // Outputs: [2, 4, 6, 8]\n// The .map method applies the provided function to each element of the array and returns a new array.</code></pre>",
    "difficulty": "easy",
    "quiz": "What does the .map method do in JavaScript, and provide an example?"
  },
  {
    "id": 4,
    "title": "Nested Destructuring",
    "description": "Nested destructuring allows you to extract values from nested objects and arrays. This means you can unpack properties from objects within objects, or elements from arrays within arrays, making it easier to work with complex data structures.",
    "example": "<pre><code>const handleCheckboxChange = ({ target: { value, checked } }) => {\n  // This is an example of Nested destructuring\n  // Destructuring the event object to get the target element\n  // Then destructuring the target element to get the 'value' and 'checked' properties\n  // This is equivalent to:\n  // const value = event.target.value;\n  // const checked = event.target.checked;\n};</code></pre>",
    "difficulty": "easy",
    "quiz": "What is nested destructuring in JavaScript, and provide an example?"
  },
  {
    "id": 5,
    "title": "Conditional Rendering with Ternary Operator",
    "description": "The ternary operator in JavaScript is a concise way to perform conditional rendering. It evaluates a condition and returns one value if the condition is true and another value if it is false.",
    "example": "<pre><code>&lt;div className={isExpanded ? 'content-visible' : 'content-hidden'}&gt;&lt;/div&gt;\n// This renders the div with 'content-visible' class if isExpanded is true,\n// otherwise it renders with 'content-hidden' class.</code></pre>",
    "difficulty": "intermediate",
    "quiz": "How do you use the ternary operator for conditional rendering in React?"
  },
  {
    "id": 6,
    "title": "Using the Previous State in React",
    "description": "In React, when updating state based on the previous state, it is common to use the functional form of the state setter function. This form provides the previous state as an argument, ensuring that the state updates correctly, even if there are multiple state updates in a short period of time.",
    "example": "<pre><code>setDifficulties((prev) =>\n  checked\n    ? [...prev, value.toLowerCase()]\n    : prev.filter((difficulty) => difficulty !== value.toLowerCase())\n);\n// This uses the previous state 'prev' to add or remove difficulties based on the checkbox state.</code></pre>",
    "difficulty": "advanced",
    "quiz": "Why is it important to use the previous state when updating state in React?"
  },
  {
    "id": 7,
    "title": "Using the Spread Operator",
    "description": "The spread operator (`...`) in JavaScript makes it easy to work with arrays. It can combine multiple arrays into one or create a copy of an array.",
    "example": "<pre><code>// Example of using the spread operator with arrays:\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\nconsole.log(combined); // Output: [1, 2, 3, 4, 5, 6]\n\n// Example of using the spread operator to copy an array:\nconst original = ['a', 'b', 'c'];\nconst copy = [...original];\nconsole.log(copy); // Output: ['a', 'b', 'c']</code></pre>",
    "difficulty": "easy",
    "quiz": "How do you use the spread operator to combine two arrays?"
  },
  {
    "id": 8,
    "title": "Using the Spread Operator in State Updates",
    "description": "The spread operator (`...`) in JavaScript allows you to create a new array that includes elements from an existing array, as well as any additional elements you specify. This is useful in React when you want to update state by adding new values to the previous state.",
    "example": "<pre><code>setDifficulties((prev) =>\n  checked\n    ? [...prev, value.toLowerCase()]\n    : prev.filter((difficulty) => difficulty !== value.toLowerCase())\n);\n// The spread operator is used to add the new difficulty to the previous state.</code></pre>",
    "difficulty": "intermediate",
    "quiz": "How do you use the spread operator to update state in React?"
  },
  {
    "id": 9,
    "title": "Template Literals",
    "description": "Template literals are a feature in JavaScript that allow you to embed expressions and variables within strings. They use backticks (` `) instead of quotes and can contain placeholders indicated by the dollar sign and curly braces (${expression}). This makes it easier to create complex strings.",
    "example": "<pre><code>// Example of using template literals\nconst name = 'Alice';\nconst age = 25;\nconst greeting = `Hello, my name is ${name} and I am ${age} years old.`;\nconsole.log(greeting); // Outputs: Hello, my name is Alice and I am 25 years old.\n\n// Example of using template literals in JSX\n&lt;label\n  className={`checkbox-label ${difficulties.includes('advanced') ? 'selected' : ''}`}\n&gt;\n  Advanced\n&lt;/label&gt;\n\n// Explanation of the JSX example\n// 1. **Template Literals**: Template literals in JavaScript are defined using backticks (`` ` ``). They allow embedding expressions inside a string using `${expression}`.\n// 2. **Conditional Class Assignment**: In JSX, you can dynamically assign class names using template literals. The expression inside the curly braces `${}` evaluates whether the `difficulties` array includes the string 'advanced'.\n// 3. **Class Assignment**: If `difficulties.includes('advanced')` evaluates to `true`, the string 'selected' is included in the class name. If `false`, an empty string is included. The resulting class name will be either `checkbox-label selected` or just `checkbox-label` depending on the condition.\n// 4. **Rendered Output**: The &lt;label&gt; element will have a class of `checkbox-label` by default. If 'advanced' is included in the `difficulties` array, it will also have the `selected` class, resulting in `class=\"checkbox-label selected\"`. The text content of the label is 'Advanced'.\n</code></pre>",
    "difficulty": "easy",
    "quiz": "What are template literals in JavaScript, and how do you use them?"
  }, 
  {
    "id": 10,
    "title": "Synchronous vs Asynchronous Code",
    "description": "Synchronous code runs sequentially, meaning each operation waits for the previous one to complete. Asynchronous code allows multiple operations to run simultaneously, without waiting for others to finish. This helps improve performance and responsiveness, especially for tasks like fetching data from a server.",
    "example": "<pre><code>// Synchronous code example\nconsole.log('Start');\nconsole.log('End');\n// Output: Start, End\n\n// Asynchronous code example\nconsole.log('Start');\nsetTimeout(() => {\n  console.log('Inside setTimeout');\n}, 1000);\nconsole.log('End');\n// Output: Start, End, Inside setTimeout\n// The setTimeout function runs asynchronously, allowing 'End' to be logged before the timeout completes.</code></pre>",
    "difficulty": "easy",
    "quiz": "What is the difference between synchronous and asynchronous code in JavaScript?"
  },
  {
    "id": 11,
    "title": "Non-blocking Code Concepts",
    "description": "Non-blocking code in JavaScript lets the program keep running other tasks while waiting for an asynchronous operation to complete. This makes sure the program doesn't freeze. It is achieved through callbacks, Promises, and async/await, helping to manage tasks like network requests and timers efficiently.",
    "example": "<pre><code>// Example of non-blocking code\nconsole.log('Start');\n\nsetTimeout(() => {\n  console.log('Inside setTimeout');\n}, 1000);\n\nconsole.log('End');\n\n// Output:\n// Start\n// End\n// Inside setTimeout\n// The setTimeout function is non-blocking, so the code continues executing while waiting for the timeout to complete.\n</code></pre>",
    "difficulty": "easy",
    "quiz": "What is non-blocking code in JavaScript, and why is it important?"
  },
  {
    "id": 12,
    "title": "Promises in JavaScript",
    "description": "A Promise in JavaScript is a way to handle asynchronous operations. It represents a value that may be available now, or in the future, or never. Promises help us deal with asynchronous code by allowing us to write code that looks more synchronous using `.then()` and `.catch()` to handle success and errors.",
    "example": "<pre><code>// Example of a promise\nconst fetchData = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const success = true; // Simulate a successful operation\n      if (success) {\n        resolve('Data fetched successfully');\n      } else {\n        reject('Error fetching data');\n      }\n    }, 1000);\n  });\n};\n\nfetchData()\n  .then((result) => {\n    console.log(result); // Outputs: Data fetched successfully\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n</code></pre>",
    "difficulty": "intermediate",
    "quiz": "What is a promise in JavaScript, and how do you use it?"
  },
  {
    "id": 13,
    "title": "Async/Await in JavaScript",
    "description": "Async/await is a simpler way to work with promises in JavaScript. By using `async` before a function and `await` before a promise, you can write asynchronous code that looks like synchronous code. It makes your code easier to read and understand.",
    "example": "<pre><code>// Example of async/await\nconst fetchDataAsync = async () => {\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n};\n\nfetchDataAsync();\n</code></pre>",
    "difficulty": "intermediate",
    "quiz": "What is async/await in JavaScript, and how do you use it?"
  },
  {
    "id": 14,
    "title": "Differences between Promises and Async/Await",
    "description": "Promises and async/await both handle asynchronous operations in JavaScript. Promises use `.then()` and `.catch()`, which can make the code look complex. Async/await makes it easier to read and write asynchronous code by using `try` and `catch` for error handling, just like synchronous code.",
    "example": "<pre><code>// Promise example\nconst fetchData = () => {\n  return fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.error('Error:', error));\n};\n\nfetchData();\n\n// Async/Await example\nconst fetchDataAsync = async () => {\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n\nfetchDataAsync();\n</code></pre>",
    "difficulty": "advanced",
    "quiz": "What are the differences between Promises and async/await in JavaScript?"
  }
]
