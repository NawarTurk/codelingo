[
  {
    "id": 1,
    "title": "Destructuring Assignment",
    "description": "Destructuring assignment is a syntax in JavaScript that allows you to unpack values from arrays or properties from objects into distinct variables. It makes the code more concise and readable by allowing the extraction of multiple properties in one statement.",
    "example": "<pre><code>// Destructuring arrays\nconst [a, b] = [1, 2];\nconsole.log(a); // Outputs: 1\nconsole.log(b); // Outputs: 2\n\n// Destructuring objects\nconst user = { name: 'Alice', age: 25 };\nconst { name, age } = user;\nconsole.log(name); // Outputs: Alice\nconsole.log(age); // Outputs: 25\n\n// This allows for concise and readable code by extracting multiple properties in one statement.</code></pre>",
    "difficulty": "easy",
    "quiz": "What is destructuring assignment in JavaScript?"
  },
  {
    "id": 2,
    "title": "Array.filter",
    "description": "The `.filter` method creates a new array containing only the elements that pass a specified test implemented by a provided function. It iterates through each element in the array and includes it in the new array only if the function returns `true` for that element.",
    "example": "<pre><code>const numbers = [1, 2, 3, 4];\nconst evenNumbers = numbers.filter(n => n % 2 === 0);\nconsole.log(evenNumbers); // Outputs: [2, 4]\n// The .filter method applies the provided function to each element of the array and returns a new array with elements that pass the test.</code></pre>",
    "difficulty": "easy",
    "quiz": "What does the .filter method do in JavaScript, and provide an example?"
  },
  {
    "id": 3,
    "title": "Array.map",
    "description": "The `.map` method creates a new array populated with the results of calling a provided function on every element in the calling array. It applies the function to each element and returns a new array containing the transformed elements.",
    "example": "<pre><code>const numbers = [1, 2, 3, 4];\nconst doubled = numbers.map(n => n * 2);\nconsole.log(doubled); // Outputs: [2, 4, 6, 8]\n// The .map method applies the provided function to each element of the array and returns a new array.</code></pre>",
    "difficulty": "easy",
    "quiz": "What does the .map method do in JavaScript, and provide an example?"
  },
  {
    "id": 4,
    "title": "Nested Destructuring",
    "description": "Nested destructuring allows you to extract values from nested objects and arrays. This means you can unpack properties from objects within objects, or elements from arrays within arrays, making it easier to work with complex data structures.",
    "example": "<pre><code>const handleCheckboxChange = ({ target: { value, checked } }) => {\n  // This is an example of Nested destructuring\n  // Destructuring the event object to get the target element\n  // Then destructuring the target element to get the 'value' and 'checked' properties\n  // This is equivalent to:\n  // const value = event.target.value;\n  // const checked = event.target.checked;\n};</code></pre>",
    "difficulty": "easy",
    "quiz": "What is nested destructuring in JavaScript, and provide an example?"
  },
  {
    "id": 5,
    "title": "Conditional Rendering with Ternary Operator",
    "description": "The ternary operator in JavaScript is a concise way to perform conditional rendering. It evaluates a condition and returns one value if the condition is true and another value if it is false.",
    "example": "<pre><code>&lt;div className={isExpanded ? 'content-visible' : 'content-hidden'}&gt;&lt;/div&gt;\n// This renders the div with 'content-visible' class if isExpanded is true,\n// otherwise it renders with 'content-hidden' class.</code></pre>",
    "difficulty": "intermediate",
    "quiz": "How do you use the ternary operator for conditional rendering in React?"
  },
  {
    "id": 6,
    "title": "Using the Previous State in React",
    "description": "In React, when updating state based on the previous state, it is common to use the functional form of the state setter function. This form provides the previous state as an argument, ensuring that the state updates correctly, even if there are multiple state updates in a short period of time.",
    "example": "<pre><code>setDifficulties((prev) =>\n  checked\n    ? [...prev, value.toLowerCase()]\n    : prev.filter((difficulty) => difficulty !== value.toLowerCase())\n);\n// This uses the previous state 'prev' to add or remove difficulties based on the checkbox state.</code></pre>",
    "difficulty": "advanced",
    "quiz": "Why is it important to use the previous state when updating state in React?"
  },
  {
    "id": 7,
    "title": "Using the Spread Operator",
    "description": "The spread operator (`...`) in JavaScript makes it easy to work with arrays. It can combine multiple arrays into one or create a copy of an array.",
    "example": "<pre><code>// Example of using the spread operator with arrays:\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\nconsole.log(combined); // Output: [1, 2, 3, 4, 5, 6]\n\n// Example of using the spread operator to copy an array:\nconst original = ['a', 'b', 'c'];\nconst copy = [...original];\nconsole.log(copy); // Output: ['a', 'b', 'c']</code></pre>",
    "difficulty": "easy",
    "quiz": "How do you use the spread operator to combine two arrays?"
  },
  {
    "id": 8,
    "title": "Using the Spread Operator in State Updates",
    "description": "The spread operator (`...`) in JavaScript allows you to create a new array that includes elements from an existing array, as well as any additional elements you specify. This is useful in React when you want to update state by adding new values to the previous state.",
    "example": "<pre><code>setDifficulties((prev) =>\n  checked\n    ? [...prev, value.toLowerCase()]\n    : prev.filter((difficulty) => difficulty !== value.toLowerCase())\n);\n// The spread operator is used to add the new difficulty to the previous state.</code></pre>",
    "difficulty": "intermediate",
    "quiz": "How do you use the spread operator to update state in React?"
  },
  {
    "id": 9,
    "title": "Template Literals",
    "description": "Template literals are a feature in JavaScript that allow you to embed expressions and variables within strings. They use backticks (` `) instead of quotes and can contain placeholders indicated by the dollar sign and curly braces (${expression}). This makes it easier to create complex strings.",
    "example": "<pre><code>// Example of using template literals\nconst name = 'Alice';\nconst age = 25;\nconst greeting = `Hello, my name is ${name} and I am ${age} years old.`;\nconsole.log(greeting); // Outputs: Hello, my name is Alice and I am 25 years old.\n\n// Example of using template literals in JSX\n&lt;label\n  className={`checkbox-label ${difficulties.includes('advanced') ? 'selected' : ''}`}\n&gt;\n  Advanced\n&lt;/label&gt;\n\n// Explanation of the JSX example\n// 1. **Template Literals**: Template literals in JavaScript are defined using backticks (`` ` ``). They allow embedding expressions inside a string using `${expression}`.\n// 2. **Conditional Class Assignment**: In JSX, you can dynamically assign class names using template literals. The expression inside the curly braces `${}` evaluates whether the `difficulties` array includes the string 'advanced'.\n// 3. **Class Assignment**: If `difficulties.includes('advanced')` evaluates to `true`, the string 'selected' is included in the class name. If `false`, an empty string is included. The resulting class name will be either `checkbox-label selected` or just `checkbox-label` depending on the condition.\n// 4. **Rendered Output**: The &lt;label&gt; element will have a class of `checkbox-label` by default. If 'advanced' is included in the `difficulties` array, it will also have the `selected` class, resulting in `class=\"checkbox-label selected\"`. The text content of the label is 'Advanced'.\n</code></pre>",
    "difficulty": "easy",
    "quiz": "What are template literals in JavaScript, and how do you use them?"
  },
  {
    "id": 10,
    "title": "Synchronous vs Asynchronous Code",
    "description": "Synchronous code runs sequentially, meaning each operation waits for the previous one to complete. Asynchronous code allows multiple operations to run simultaneously, without waiting for others to finish. This helps improve performance and responsiveness, especially for tasks like fetching data from a server.",
    "example": "<pre><code>// Synchronous code example\nconsole.log('Start');\nconsole.log('End');\n// Output: Start, End\n\n// Asynchronous code example\nconsole.log('Start');\nsetTimeout(() => {\n  console.log('Inside setTimeout');\n}, 1000);\nconsole.log('End');\n// Output: Start, End, Inside setTimeout\n// The setTimeout function runs asynchronously, allowing 'End' to be logged before the timeout completes.</code></pre>",
    "difficulty": "easy",
    "quiz": "What is the difference between synchronous and asynchronous code in JavaScript?"
  },
  {
    "id": 11,
    "title": "Non-blocking Code Concepts",
    "description": "Non-blocking code in JavaScript lets the program keep running other tasks while waiting for an asynchronous operation to complete. This makes sure the program doesn't freeze. It is achieved through callbacks, Promises, and async/await, helping to manage tasks like network requests and timers efficiently.",
    "example": "<pre><code>// Example of non-blocking code\nconsole.log('Start');\n\nsetTimeout(() => {\n  console.log('Inside setTimeout');\n}, 1000);\n\nconsole.log('End');\n\n// Output:\n// Start\n// End\n// Inside setTimeout\n// The setTimeout function is non-blocking, so the code continues executing while waiting for the timeout to complete.\n</code></pre>",
    "difficulty": "easy",
    "quiz": "What is non-blocking code in JavaScript, and why is it important?"
  },
  {
    "id": 12,
    "title": "Promises in JavaScript",
    "description": "A Promise in JavaScript is a way to handle asynchronous operations. It represents a value that may be available now, or in the future, or never. Promises help us deal with asynchronous code by allowing us to write code that looks more synchronous using `.then()` and `.catch()` to handle success and errors.",
    "example": "<pre><code>// Example of a promise\nconst fetchData = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const success = true; // Simulate a successful operation\n      if (success) {\n        resolve('Data fetched successfully');\n      } else {\n        reject('Error fetching data');\n      }\n    }, 1000);\n  });\n};\n\nfetchData()\n  .then((result) => {\n    console.log(result); // Outputs: Data fetched successfully\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n</code></pre>",
    "difficulty": "intermediate",
    "quiz": "What is a promise in JavaScript, and how do you use it?"
  },
  {
    "id": 13,
    "title": "Async/Await in JavaScript",
    "description": "Async/await is a simpler way to work with promises in JavaScript. By using `async` before a function and `await` before a promise, you can write asynchronous code that looks like synchronous code. It makes your code easier to read and understand.",
    "example": "<pre><code>// Example of async/await\nconst fetchDataAsync = async () => {\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n};\n\nfetchDataAsync();\n</code></pre>",
    "difficulty": "intermediate",
    "quiz": "What is async/await in JavaScript, and how do you use it?"
  },
  {
    "id": 14,
    "title": "Differences between Promises and Async/Await",
    "description": "Promises and async/await both handle asynchronous operations in JavaScript. Promises use `.then()` and `.catch()`, which can make the code look complex. Async/await makes it easier to read and write asynchronous code by using `try` and `catch` for error handling, just like synchronous code.",
    "example": "<pre><code>// Promise example\nconst fetchData = () => {\n  return fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.error('Error:', error));\n};\n\nfetchData();\n\n// Async/Await example\nconst fetchDataAsync = async () => {\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n\nfetchDataAsync();\n</code></pre>",
    "difficulty": "advanced",
    "quiz": "What are the differences between Promises and async/await in JavaScript?"
  },
  {
    "id": 15,
    "title": "Short-Circuit Evaluation with &&",
    "description": "Short-circuit evaluation in JavaScript using the `&&` operator ensures that the second operand is only evaluated if the first operand is true. This allows for conditional execution of code without needing an explicit if statement.",
    "example": "<pre><code>// Example of short-circuit evaluation with &&\nconst isTrue = true;\nisTrue && console.log('This will print because isTrue is true');\n\nconst isFalse = false;\nisFalse && console.log('This will not print because isFalse is false');\n</code></pre>",
    "difficulty": "easy",
    "quiz": "What is short-circuit evaluation with the `&&` operator in JavaScript, and how does it work?"
  },
  {
    "id": 16,
    "title": "Short-Circuit Evaluation with ||",
    "description": "Short-circuit evaluation in JavaScript using the `||` operator ensures that the second operand is only evaluated if the first operand is false. This allows for providing default values or fallback expressions.",
    "example": "<pre><code>// Example of short-circuit evaluation with ||\nconst value1 = null;\nconst value2 = 'Default Value';\nconst result = value1 || value2;\nconsole.log(result); // Outputs: 'Default Value' because value1 is null\n\nconst value3 = 'Actual Value';\nconst result2 = value3 || value2;\nconsole.log(result2); // Outputs: 'Actual Value' because value3 is not null or false</code></pre>",
    "difficulty": "easy",
    "quiz": "What is short-circuit evaluation with the `||` operator in JavaScript, and how does it work?"
  },
  {
    "id": 17,
    "title": "Component Re-rendering with Prop Changes",
    "description": "In React, when a state variable in a parent component (Component A) changes, it causes the parent component to re-render. If this state variable is passed as a prop to child components (Component B and C), the re-rendering propagates to these children, causing them to re-render as well. This ensures that the UI is consistent and reflects the current state. However, if a non-state variable in Component A changes (i.e., a regular JavaScript variable not managed by React's state or props), it does not automatically trigger re-renders of A, B, or C. React components re-render only when there's a change in their state or props. To trigger re-renders based on non-state variable changes, the variable must be part of React's state management, typically done by incorporating it into the state using `useState` or a similar hook/method.",
    "example": "<pre><code>// Parent component with state\nfunction Parent() {\n  const [value, setValue] = useState(10);\n  return (\n    &lt;div&gt;\n      &lt;ChildA value={value} /&gt;\n      &lt;ChildB value={value} /&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Change in state triggers re-render of Parent, ChildA, and ChildB\n\n// Non-state variable\nlet x = 10;\nfunction updateX() {\n  x = 20; // No re-render triggered\n}</code></pre>",
    "difficulty": "easy",
    "quiz": "What happens in React when a state variable changes in a parent component and is passed as a prop to child components?"
  },
  {
    "id": 18,
    "title": "useState in React",
    "description": "The useState hook is a fundamental hook in React that allows you to add state to functional components. It returns a pair: the current state value and a function that lets you update it. This makes state management in functional components both accessible and efficient.",
    "example": "<pre><code>// Example of useState in React\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() => setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>",
    "difficulty": "easy",
    "quiz": "What is the purpose of the useState hook in React?"
  },
  {
    "id": 19,
    "title": "useEffect in React",
    "description": "The useEffect hook lets you perform side effects in function components. It is a hook that encapsulates functions that should be executed after the component renders. useEffect can be configured to run after every render or only when certain values change, making it versatile for various use cases such as API calls, subscriptions, or manually changing the DOM.",
    "example": "<pre><code>// Example of useEffect in React\nfunction Timer() {\n  const [seconds, setSeconds] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds(prevSeconds => prevSeconds + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return <div>Timer: {seconds} seconds</div>;\n}</code></pre>",
    "difficulty": "easy",
    "quiz": "What is the purpose of the useEffect hook in React?"
  },
  {
    "id": 20,
    "title": "HTTP Methods: GET, POST, PUT, DELETE",
    "description": "HTTP methods are actions used to request data from a server or send data to a server. GET is used to retrieve data, POST to send new data, PUT to update existing data, and DELETE to remove data. Understanding these methods is crucial for interacting with RESTful APIs.",
    "example": "<pre><code>// Example usage of HTTP methods in a RESTful service\n// GET: Fetch data\nfetch('/api/data')\n// POST: Create new entry\nfetch('/api/data', { method: 'POST', body: JSON.stringify(data) })\n// PUT: Update existing entry\nfetch('/api/data/1', { method: 'PUT', body: JSON.stringify(newData) })\n// DELETE: Remove entry\nfetch('/api/data/1', { method: 'DELETE' })</code></pre>",
    "difficulty": "easy",
    "quiz": "What is the purpose of the PUT HTTP method?"
  },
  {
    "id": 21,
    "title": "HTTP Response Status Codes: 200, 400, 500",
    "description": "HTTP response status codes indicate the result of a server's attempt to fulfill a request. '200 OK' means the request was successful, '400 Bad Request' indicates a client error, and '500 Internal Server Error' signifies a server-side error. These codes are essential for debugging client-server interactions.",
    "example": "<pre><code>// Example of handling HTTP response status codes\nfetch('/api/data').then(response => {\n  if (response.status === 200) {\n    console.log('Success');\n  } else if (response.status === 400) {\n    console.error('Bad Request');\n  } else if (response.status === 500) {\n    console.error('Server Error');\n  }\n})</code></pre>",
    "difficulty": "easy",
    "quiz": "What does the '500' status code indicate in an HTTP response?"
  },
  {
    "id": 22,
    "title": "Authorization Header in HTTP",
    "description": "The Authorization header is used in HTTP requests to provide credentials proving the requestor has permission to perform the request. This is often used in API calls that require authentication, typically by sending a token or credentials in a standardized format.",
    "example": "<pre><code>// Example of using an Authorization header with Bearer token\nfetch('/api/data', {\n  headers: { 'Authorization': 'Bearer your_access_token_here' }\n})</code></pre>",
    "difficulty": "easy",
    "quiz": "How is the Authorization header typically used in making API requests?"
  },
  {
    "id": 23,
    "title": "What is an Endpoint?",
    "description": "In the context of web development and APIs, an endpoint is a specific URL where a web service or API can be accessed by a client application. Endpoints are designed to handle specific types of operations and are integral to the interaction between client-side and server-side applications.",
    "example": "<pre><code>// Example of an API endpoint\n// Endpoint for retrieving user data\n'https://api.example.com/users'</code></pre>",
    "difficulty": "easy",
    "quiz": "Define an endpoint in the context of APIs."
  },
  {
    "id": 24,
    "title": "useEffect and Dependency Arrays",
    "description": "Understanding `useEffect` and its dependency array is crucial for managing side effects in React. A dependency array tells React when to reapply effects after the initial render. An empty array (`[]`) means the effect runs only on mount and unmount, not on updates. Including specific dependencies (`[deps]`) causes the effect to run on mount and whenever those dependencies change. This distinction is vital for ensuring components update correctly based on changes in props or state.",
    "example": "<pre><code>// useEffect with empty dependency array\nuseEffect(() => {\n  console.log('Component mounted');\n}, []);\n\n// useEffect with dependencies\nuseEffect(() => {\n  console.log('Prop or state changed');\n}, [prop, state]);</code></pre>",
    "difficulty": "intermediate",
    "quiz": "What is the effect of changing a dependency in the `useEffect` dependency array on a component's re-rendering behavior?"
  },
  {
    "id": 25,
    "title": "Popular Git Commit Message Prefixes",
    "description": "Using standardized prefixes in Git commit messages helps in categorizing and understanding changes in the codebase. These prefixes provide context about the type of changes made, making it easier to review and maintain the code.",
    "example": "<pre><code>// Example of common Git commit message prefixes\n\n// feat: A new feature\nfeat: add user authentication module\n\n// fix: A bug fix\nfix: resolve crash on user login\n\n// docs: Documentation changes\ndocs: update API usage section\n\n// style: Code style changes (formatting, missing semi colons, etc.)\nstyle: format code according to eslint rules\n\n// refactor: Code changes that neither fix a bug nor add a feature\nrefactor: optimize user data processing\n\n// test: Adding missing tests or correcting existing tests\ntest: add tests for authentication module\n\n// chore: Changes to the build process or auxiliary tools and libraries\nchore: update dependencies and build scripts\n</code></pre>",
    "difficulty": "easy",
    "quiz": "What are some common prefixes used in Git commit messages and when are they used?"
  }
]
