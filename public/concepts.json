[
    {
      "id": 1,
      "title": "Props Drilling",
      "description": "Props drilling refers to the process of passing data from one component to another through multiple layers of components in a React application.",
      "example": "<pre><code>function App() {\n  const user = { name: 'Alice' };\n  return &lt;Parent user={user} /&gt;;\n}\nfunction Parent({ user }) {\n  return &lt;Child user={user} /&gt;;\n}\nfunction Child({ user }) {\n  return &lt;div&gt;{user.name}&lt;/div&gt;;\n}\n// The user object is passed down from App to Child through Parent.</code></pre>",
      "difficulty": "beginner",
      "quiz": "What is props drilling and how can it be avoided?"
    },
    {
      "id": 2,
      "title": "Type Inference",
      "description": "Type inference refers to the ability of the TypeScript compiler to automatically determine the type of a variable based on its value without explicit type annotations.",
      "example": "<pre><code>let x = 10; // x is inferred to be a number\nlet y = 'hello'; // y is inferred to be a string\nfunction add(a: number, b: number): number {\n  return a + b;\n}\nconst result = add(2, 3); // result is inferred to be a number\n// TypeScript infers types from the values assigned and function return types.</code></pre>",
      "difficulty": "beginner",
      "quiz": "What are the benefits of type inference in TypeScript?"
    },
    {
      "id": 3,
      "title": "Promises",
      "description": "Promises in JavaScript are used to handle asynchronous operations, providing a way to attach callbacks for success (resolved) and failure (rejected) cases.",
      "example": "<pre><code>const fetchData = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Data received');\n    }, 2000);\n  });\n};\nfetchData()\n  .then(data => console.log(data)) // Outputs: Data received after 2 seconds\n  .catch(error => console.error(error));\n// Promises provide a clean way to handle asynchronous operations.</code></pre>",
      "difficulty": "advanced",
      "quiz": "What are the three states of a promise in JavaScript?"
    },
    {
      "id": 4,
      "title": "RESTful APIs",
      "description": "RESTful APIs are web services that follow the principles of Representational State Transfer (REST), allowing different systems to communicate over HTTP.",
      "example": "<pre><code>- GET /users: Retrieves a list of users.\n- POST /users: Creates a new user.\n- PUT /users/1: Updates the details of user with ID 1.\n- DELETE /users/1: Deletes the user with ID 1.\n// Each endpoint corresponds to a specific HTTP method and URL.</code></pre>",
      "difficulty": "beginner",
      "quiz": "What are the common HTTP methods used in RESTful APIs?"
    },
    {
      "id": 5,
      "title": "Recursion",
      "description": "Recursion is a programming technique where a function calls itself to solve smaller instances of the same problem, often used for tasks that can be divided into similar subtasks.",
      "example": "<pre><code>function factorial(n) {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n}\nconst result = factorial(5); // Outputs: 120\n// The factorial function calls itself with a decremented value until it reaches the base case.</code></pre>",
      "difficulty": "intermediate",
      "quiz": "What is recursion and how is it different from iteration?"
    }
  ]
  